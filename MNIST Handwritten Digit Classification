 import numpy as np
 import matplotlib.pyplot as plt
 !pip install tensorflow
 import tensorflow as tf
 from tensorflow import keras
 from tensorflow.keras.utils import to_categorical
 from tensorflow.keras.preprocessing.image import load_img, img_to_array
 from keras.models import load_model
 from keras.models import Sequential
 from keras.layers import Dense
 from keras.layers import Conv2D
 from keras.layers import MaxPooling2D
 from keras.layers import Flatten
 from keras.layers import Dropout
from keras.datasets import mnist
 (X_train, y_train), (X_test, y_test) = mnist.load_data()
 print("X_train original shape", X_train.shape)
 print("y_train original shape", y_train.shape)
 plt.figure(figsize=(12,10))
 for i in range(12):
 plt.subplot(3,4,i+1)
 plt.imshow(X_train[i], cmap='gray', interpolation='none')
 plt.title(f"Class {y_train[i]}")
X_train = X_train.reshape(X_train.shape[0], 28, 28, 1) 
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)
 y_train = y_train.reshape(-1,1)
 y_test = y_test.reshape(-1,1)
 print('Shape of X_train =', X_train.shape)
 print('Shape of X_test is =', X_test.shape)
 print('Shape of y_train is =', y_train.shape)
 print('Shape of y_test is =', y_test.shape)
 X_train = X_train.astype('float32')
 X_test = X_test.astype('float32')
 X_train /= 255
 X_test /= 255
 from keras.utils import to_categorical 
nb_classes = 10 # number of classification outputs {0, 1, 2,..,9}
 Y_train = to_categorical(y_train, nb_classes)
 Y_test = to_categorical(y_test, nb_classes)
 print('Shape of Y_train =', Y_train.shape)
 print('Shape of Y_test =', Y_test.shape)
 import tensorflow as tf
 from tensorflow.keras.models import Sequential
 from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
 # Initialize the CNN model
 model_cnn = Sequential()
 # Define the layers
model_cnn.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28
 model_cnn.add(MaxPooling2D(pool_size=(2, 2)))
 model_cnn.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))
 model_cnn.add(MaxPooling2D(pool_size=(2, 2)))
 model_cnn.add(Flatten())
 model_cnn.add(Dense(128, activation='relu'))
 model_cnn.add(Dropout(0.5))
 model_cnn.add(Dense(10, activation='softmax'))

 # Show the model summary
 model_cnn.summary()
 # Compile the model
 model_cnn.compile(optimizer='adam', 
loss='categorical_crossentropy', 
metrics=['accuracy'])
 # Train the model
 history = model_cnn.fit(X_train, Y_train, 
epochs=10, 
batch_size=32,
validation_split=0.2,  # Reserve 20% of training data for v
 verbose=1)
 import matplotlib.pyplot as plt
 # Plot training and validation loss
 plt.figure(figsize=(10, 6))
 plt.plot(history.history['loss'], label='Training Loss')
 plt.plot(history.history['val_loss'], label='Validation Loss')
 plt.xlabel('Epochs')
 plt.ylabel('Loss')
 plt.title('Training and Validation Loss')
 plt.legend()
 plt.show()
 # Plot training and validation accuracy
 plt.figure(figsize=(10, 6))
 plt.plot(history.history['accuracy'], label='Training Accuracy')
 plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
 plt.xlabel('Epochs')
 plt.ylabel('Accuracy')
 plt.title('Training and Validation Accuracy')
 plt.legend()
 plt.show()
 import matplotlib.pyplot as plt
 import numpy as np
 # Set the index of the image you want to test (change this to use a different image
 image_index = 3  # Try different values here, from 0 to 11
 # Choose the image and its label from X_train and y_train
 test_image = X_train[image_index]
 test_image_label = y_train[image_index]
 # Display the original label for verification
 print(f"Original Label: {test_image_label}")
 # Reshape and normalize the image to match the input shape expected by the model
 test_image_reshaped = test_image.reshape(1, 28, 28, 1)
 test_image_normalized = test_image_reshaped / 255.0
 # Make a prediction
 prediction = model_cnn.predict(test_image_normalized)
 predicted_class = np.argmax(prediction)
 # Print the prediction probabilities for debugging
 print("Prediction Probabilities:", prediction)
 # Check if the prediction is correct and print the appropriate message
 if predicted_class == test_image_label:
    print(f"The number is {predicted_class}")
 else:
    print(f"Predicted Class: {predicted_class}, True Label: {test_image_label}")
# Plot the image
 plt.imshow(test_image.squeeze(), cmap='gray')  # Use squeeze() to remove extra dime
 plt.title(f"True Label: {test_image_label}, Predicted: {predicted_class}")
 plt.axis('off')  # Hide axes for a cleaner display
 plt.show()
